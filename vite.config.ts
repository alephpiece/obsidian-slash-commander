/// <reference types="vitest" />
import tailwindcss from "@tailwindcss/vite";
import react from "@vitejs/plugin-react";
import builtins from "builtin-modules";
import { resolve } from "path";
import { defineConfig } from "vite";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY VITE
if you want to view the source, please visit the github repository of this plugin (https://github.com/alephpiece/obsidian-slash-commander)
*/
`;

// External modules that should not be bundled
const external = [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/closebrackets",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/comment",
    "@codemirror/fold",
    "@codemirror/gutter",
    "@codemirror/highlight",
    "@codemirror/history",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/matchbrackets",
    "@codemirror/panel",
    "@codemirror/rangeset",
    "@codemirror/rectangular-selection",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/stream-parser",
    "@codemirror/text",
    "@codemirror/tooltip",
    "@codemirror/view",
    ...builtins,
];

export default defineConfig({
    plugins: [react(), tailwindcss()],
    css: {
        // Fine-grained control over CSS
        preprocessorOptions: {
            scss: {
                // Globally inject SCSS variables to avoid imports in each file
                additionalData: '@use "src/ui/styles/variables.scss" as *;',
            },
        },
        // Generate sourcemaps during development
        devSourcemap: true,
    },
    build: {
        lib: {
            entry: resolve(__dirname, "src/main.ts"),
            formats: ["cjs"],
            fileName: () => "main.js",
        },
        // Optimize for production environment
        minify: process.env.NODE_ENV === "production",
        // Use appropriate sourcemap type based on environment
        sourcemap: process.env.NODE_ENV === "production" ? false : "inline",
        cssCodeSplit: false,
        outDir: ".",
        emptyOutDir: false,
        // Add build optimization options
        commonjsOptions: {
            transformMixedEsModules: true, // Better handling of mixed ESM/CJS modules
        },
        rollupOptions: {
            external,
            output: {
                entryFileNames: "main.js",
                assetFileNames: (info) => {
                    if (info.name && info.name.endsWith(".css")) {
                        return "styles.css";
                    }
                    return "[name].[ext]";
                },
                banner,
                footer: "\n/* by phibr0, SPiCaRiA, and alephpiece */",
            },
        },
    },
    resolve: {
        alias: {
            src: resolve(__dirname, "./src"),
            "@": resolve(__dirname, "./src"),
            "@data": resolve(__dirname, "./src/data"),
            "@ui": resolve(__dirname, "./src/ui"),
            "@services": resolve(__dirname, "./src/services"),
            "@utils": resolve(__dirname, "./src/utils"),
            "@assets": resolve(__dirname, "./src/assets"),
        },
    },
    test: {
        globals: true,
        environment: "jsdom",
        include: ["src/**/*.{test,spec}.{ts,tsx}", "src/**/__tests__/**/*.{test,spec}.{ts,tsx}"],
        exclude: ["**/node_modules/**"],
        coverage: {
            provider: "v8",
            reporter: ["text", "json", "html", "lcov", "text-summary"],
            exclude: [
                "**/node_modules/**",
                "**/coverage/**",
                "**/tests/**",
                "**/.yarn/**",
                "**/.cursor/**",
                "**/.vscode/**",
                "**/.github/**",
                "**/*.d.ts",
                "**/__tests__/**",
                "**/*.{test,spec}.{ts,tsx}",
                "**/*.config.{js,ts}",
                "main.js",
                "scripts/**",
                "src/assets/**",
                "src/data/{constants,models}/**",
            ],
        },
        testTimeout: 20000,
        pool: "threads",
        poolOptions: {
            threads: {
                singleThread: false,
            },
        },
    },
});
